
@startuml
'https://plantuml.com/class-diagram


interface StateInterface<V=generic state variables> {
+ V getVariables();
+ set(StateInterface<V> state);
}

interface AgentInterface<V=generic state variables> {
+ int chooseAction(double probRandom)  //todo int generic
+ setState(StateInterface<<V>> state);
+ double readValue(StateInterface<<V>> state);  //todo needed?
}


abstract class AgentAbstract {
    EnvironmentInterface<<S>> environment;
    StateInterface<<S>> state;
}


interface TrainerInterface<V=generic state variables> {
+ train()
}

abstract class TrainerAbstract {
    EnvironmentInterface<<S>> environment;
    StateInterface<<S>> state;
}

interface EnvironmentInterface<S=generic state variables> {
+  StepReturn step(StateInterface<<S>> state,int action);
+  boolean isTerminalState(StateInterface<<S>> state);
}


AgentInterface <|-- AgentAbstract
AgentAbstract  <|-- Agent1
AgentAbstract  <|-- Agent2

TrainerInterface <|-- TrainerAbstract

StateInterface -[hidden]- EnvironmentInterface

EnvironmentInterface <|-- Anvironment1
EnvironmentInterface <|-- Anvironment2


@enduml