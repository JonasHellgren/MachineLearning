
@startuml
'https://plantuml.com/class-diagram


interface StateInterface<V=generic state variables> {
+ V getVariables();
+ set(StateInterface<V> state);
}

interface AgentInterface<V=generic state variables> {
+ int chooseAction(double probRandom)  //todo int generic
'/ + setState(StateInterface<<V>> state);
'/ + double readValue(StateInterface<<V>> state);  //todo needed?
}

'/ AgentThetaActorInterface  agent.changeActor
'/ AgentNeuralActorInterface  fitActor
'/ AgentNeuralActorCriticInterface  fitActor fitCritic


abstract class AgentAbstract {
'/    EnvironmentInterface<<V>> environment;
    StateInterface<<V>> state;
}


interface TrainerInterface<V=generic state variables> {
+ train()
}

abstract class TrainerAbstract {
TrainingTracker tracker
TrainerParameters parameters
}

abstract class TrainerAbstractTBD {
    EnvironmentInterface<<V>> environment;
    Agent<<V>> agent;
}

interface EnvironmentInterface<S=generic state variables> {
+  StepReturn<<V>> step(StateInterface<<V>> state,int action);
'/ +  boolean isTerminalState(StateInterface<<V>> state);
}


EnvironmentInterface <|-- Environment1
EnvironmentInterface <|-- Environment2

AgentInterface <|-- AgentAbstract
AgentAbstract  <|-- Agent1
AgentAbstract  <|-- Agent2

TrainerInterface <|-- TrainerAbstract
TrainerAbstract <|-- TrainerAbstractTBD
TrainerAbstractTBD  <|-- Trainer1
TrainerAbstractTBD  <|-- Trainer2


StateInterface -[hidden]- EnvironmentInterface

AgentInterface -[hidden]- StateInterface

Environment1 -[hidden]- TrainerInterface


@enduml