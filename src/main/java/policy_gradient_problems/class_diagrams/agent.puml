@startuml
'https://plantuml.com/class-diagram

interface AgentI<V=generic state variables> {
+ int chooseAction(double probRandom)  //todo int generic
+ setState(StateI<<V>> state);
'/ + double readValue(StateI<<V>> state);  //todo needed?
}

interface AgentParamActorI {
+ changeActor(change);
}

interface AgentNeuralActorI {
+ fitActor(in,out);
}

interface AgentNeuralActorCriticI {
+ fitActor(in,out);
+ fitCritic(in,value);
}


interface AgentParamActorNeuralCriticI extends AgentParamActorI {
+ fitCritic(in,value);
}


abstract class AgentA {
'/    EnvironmentI<<V>> environment;
    StateI<<V>> state;
}

AgentI <|-- AgentA
AgentI <|-- AgentParamActorI
AgentI <|-- AgentNeuralActorI
AgentI <|-- AgentNeuralActorCriticI
AgentA  <|-- Agent1
AgentA  <|-- Agent2
AgentA  <|-- Agent3
AgentParamActorI  <|-- Agent1
AgentNeuralActorI  <|-- Agent2
AgentParamActorNeuralCriticI <|-- Agent3

@enduml