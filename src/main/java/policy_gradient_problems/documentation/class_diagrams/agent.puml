@startuml
'https://plantuml.com/class-diagram

interface AgentI<V=generic state variables> {
+ Action chooseAction(double probRandom)  //todo int generic
+ List<Double> actionProbabilitiesInState()
+ setState(StateI<<V>> state);
+ StateI<<V>> getState()
'/ + double readValue(StateI<<V>> state);  //todo needed?
}

interface ParamActorI {
+ changeActor(change);
+ ArrayRealVector calcGradLogVector(state, action);

}


interface NeuralActorI {
+ fitActor(in,out);
}


interface NeuralCriticI {
+ fitCritic(in,value);
+ double getCriticOut(StateI<V> state);
}


interface AgentParamActorI extends AgentI, ParamActorI {
}

interface AgentNeuralActorI extends AgentI, NeuralActorI {
}

interface AgentNeuralActorNeuralCriticI extends AgentI, NeuralActorI, NeuralCriticI {
}

interface AgentParamActorNeuralCriticI extends AgentParamActorI {
}

abstract class AgentA extends AgentI {
    StateI<<V>> state;
}


AgentA  <|-- Agent1
AgentA  <|-- Agent2
AgentA  <|-- Agent3
AgentParamActorI  <|-- Agent1
AgentNeuralActorI  <|-- Agent2
AgentNeuralActorNeuralCriticI <|-- Agent3



@enduml