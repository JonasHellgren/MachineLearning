@startuml
'https://plantuml.com/class-diagram

interface AgentInterface<S=generic state variables> {
+ int chooseAction(double probRandom)
+ updateState(StepReturn stepReturn);
+ double readValue(StateInterface<<S>> state);
}

interface AgentNeuralInterface {
+ learn(List<NstepExperience> miniBatch);
}

interface EnvironmentInterface<S=generic state variables> {
+  StepReturn step(StateInterface<<S>> state,int action);
+  boolean isTerminalState(StateInterface<<S>> state);
}


abstract class AgentAbstract {
    EnvironmentInterface environment;
    StateInterface<<S>> state;
}


class AgentForkNeural {
NetworkMemoryInterface memory;
}
class AgentForkTabular  {
Map<(StateInterface(ForkVariables), Double> memory;
}
class ForkEnvironment
class MazeEnvironment


AgentInterface <|-- AgentNeuralInterface

AgentInterface <|-- AgentAbstract
AgentNeuralInterface <|-- AgentForkNeural
AgentInterface <|-- AgentForkTabular
AgentAbstract <|-- AgentForkNeural
AgentAbstract <|-- AgentForkTabular

EnvironmentInterface <|-- ForkEnvironment
EnvironmentInterface <|-- MazeEnvironment

AgentAbstract  o-- ForkEnvironment
AgentAbstract  o-- MazeEnvironment





@enduml